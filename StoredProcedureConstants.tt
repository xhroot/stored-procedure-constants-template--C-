<#@ template language="C#" hostspecific="True" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Configuration" #>
<#@ import namespace="System.Configuration" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.IO" #>
<#
// This template will create a const string to reference each stored procedure.

// Use this section to configure information specific to your setup.
var _namespace = "Name.Space";
var _class = "SP";
var database = "test001";
var configPath = Path.Combine(Host.ResolvePath(@".\"), "Web.{0}.config");

// Select config file based on current build type.
var serviceProvider = Host as IServiceProvider;
var dte = serviceProvider.GetService(typeof(EnvDTE.DTE)) as EnvDTE.DTE;
var buildMode = dte.Solution.SolutionBuild.ActiveConfiguration.Name;
var buildConfig = string.Format(configPath, buildMode);

// Open config file; get connection string.
var config = ConfigurationManager.OpenMappedExeConfiguration(
	new ExeConfigurationFileMap { ExeConfigFilename = buildConfig }, 
	ConfigurationUserLevel.None);

var connectionString = config.ConnectionStrings
	.ConnectionStrings["test001ConnectionString"].ConnectionString;

#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated. 
// </auto-generated>
//------------------------------------------------------------------------------

// buildMode = <#=buildMode#>

namespace <#=_namespace#>
{
  internal static class <#=_class#>
  {
		<# foreach(var sp in GetStoredProcedures(database, connectionString)) { #>
		internal const string <#=sp#> = "<#=sp#>";
		<# } #>
	}
}

<#+
private IEnumerable<string> GetStoredProcedures(string databaseName, 
	string connectionString)
{
  var storedProcs = new List<string>();
  using(var conn = new SqlConnection(connectionString))
	{
		conn.Open();
		var cmd = conn.CreateCommand();
		cmd.CommandText = string.Format("SELECT ROUTINE_NAME FROM {0}.INFORMATION_SCHEMA.ROUTINES WHERE ROUTINE_TYPE = 'PROCEDURE'",
				databaseName);
		var reader = cmd.ExecuteReader();

		while (reader.Read())
			storedProcs.Add(reader["ROUTINE_NAME"] as string);

		reader.Close();
	}
  return storedProcs;
}
#>
